'''
  무조건 붙는다!
  코딩 팁들을 모아놓는 장소
  코딩 테스트 전에 꼭 보고 가자
'''

0. 코드 작성, 알고리즘 고민 전에 무조건 '이게 맞나?' 생각
1. 제대로 대응하는 변수 사용했는지?
2. (파이썬 기준) 1초: 2000만 연산 이하, 4MB: 리스트 100만
3. itertools 사용 가능한지 확인해보기. bisect도
4. DP: 점화식 찾는게 핵심. 가장 작은 단위의 답을 어떻게 구할 것인가에 집중하기
5. 방문처리, 데이터 추출, 삽입을 제대로 했는지 코드 적을 때 확인 하자
6. 오류 찾을땐 무작정 X 체크리스트를 생각하고 찾자****(체크 리스트는 팁 정리하면서 생각하기)
7. 최소, 최대값 갱신 타이밍 빼먹지 않고 모두 했는지?(값이 바뀌는 타이밍, 완성된 값 파악하는지 확인)
8. 모든 케이스에서 통하는지: 특이한 지점 위주로 찾기.
9. 혹은 아예 전부 통하는 알고리즘 만들기(검증 필요)
10. 최대, 최소 초기화는 최소, 최대로
11. 값을 변경할 땐 혹시 중복해서 바꾸는건 아닌지(현재 바꾸는 값이 예전에 설정한 값과 겹치는데, 이를 건들면 안되는 경우) 확인하자!
12. 2차원 배열의 겹겹의 테두리 길이는 가장 바깥이 최소공배수가 아니다. -4씩 줄어드는데 이것이 배수임을 보장하지 않는다.
    마찬가지로 어떤 배열이나 모양이 다른 것을 포함한다고 해서 가장 바깥이 모든걸 포함하는게 아니다. 이것을 명심하고 각각의
    값들이 정확히 어떤 성질인지 다 파악해야 한다.
13. ZeroDivisionError 는 div, mod 모두 해당한다.
14. 규모가 큰 코딩은 실수를 하면 찾기 힘들다. 한 번 적을 때 신나서 끝내지 말고, 잘못 적은게 있는지 지나온 길을 다시 보자.
15. 만약 여러 변수의 방문을 체크할 때 변수의 합이 일정하면(특정 조건을 만족하며 유지되면) 한개 이상의 변수를 체크하지 않아도 된다. ex) a + b + c 가 일정하면 c 의 값은
    a, b 에 의해 결정되니 최적화가 필요한 경우 굳이 저장할 필요 없다.
16. 우선순위 큐는 거의 모든 연산에서 log(n)이 소모됨. 시간이 넉넉하다면 상관없지만, 시간이 부족하다면 차라리 정렬이 필요한 순간에만 하는 것이 최적화에 좋음.
17. 시간복잡도를 줄이려면 정렬할 것을 나눠서 정렬하거나 분할정복 해도 가능?
18. 벽을 튕기는 작업은 벽을 뚫고 지나간다고 생각 해보자. 길이 l 만큼 넘어 벽과 부딪히면 그 후부턴 l - 1의 주기로 변화한다(벽 튕기고 반대로 간다는 가정 하에).
19. 문제를 잘 읽고, 내가 평소 사용하는 방식으로 교정해서 쓸 건지, 문제 따를건지 선택.
